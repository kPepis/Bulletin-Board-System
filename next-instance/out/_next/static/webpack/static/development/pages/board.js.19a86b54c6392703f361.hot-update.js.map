{"version":3,"file":"static/webpack/static/development/pages/board.js.19a86b54c6392703f361.hot-update.js","sources":["webpack:///./pages/board.tsx"],"sourcesContent":["import { Affix, Button, Icon, List, message, Modal } from \"antd\";\nimport { FormComponentProps } from \"antd/lib/form\";\nimport { NextContext } from \"next\";\nimport Head from \"next/head\";\nimport React, { Component } from \"react\";\nimport { Mutation, Query } from \"react-apollo\";\nimport CanvasDraw, { DrawingCanvas } from \"react-canvas-draw\";\nimport { connect } from \"react-redux\";\nimport { PacmanLoader } from \"react-spinners\";\nimport { bindActionCreators } from \"redux\";\nimport { addOnlineUser } from \"../actions\";\n\nimport Post, { PostProps } from \"../components/Post\";\nimport PostForm from \"../components/PostForm\";\nimport { CREATE_POST_MUTATION } from \"../graphql/mutations\";\nimport { SINGLE_BOARD_QUERY } from \"../graphql/queries\";\n\ninterface SingleBoardProps {\n  socket: SocketIOClient.Socket;\n  query: {\n    id: string;\n  };\n  userName?: string;\n}\n\ninterface SingleBoardState {\n  modalVisible: boolean;\n  modalLoading: boolean;\n  formValid: boolean;\n}\n\ninterface FormRef {\n  context: object;\n  props: FormComponentProps;\n  refs: object;\n  state: null;\n  submitHandler: React.FormEventHandler;\n}\n\ninterface PostFormFields {\n  postTitle: string;\n  postContent: string;\n}\n\nlet onlineUsers: Array<string> = [];\n\nclass Board extends Component<SingleBoardProps, SingleBoardState> {\n  static async getInitialProps(ctx: NextContext) {\n    const { query, req } = ctx;\n\n    return { query, userName: req.userName };\n  }\n\n  state: SingleBoardState = {\n    modalVisible: false,\n    modalLoading: false,\n    formValid: false,\n  };\n\n  unloadHandler = () => {\n    this.props.socket.emit(\"board disconnect\", {\n      boardId: this.props.query.id,\n      userName: this.props.userName || \"\",\n    });\n  };\n\n  componentDidMount(): void {\n    const socket = this.props.socket;\n    const id = this.props.query.id;\n    const userName = this.props.userName;\n\n    if (userName) {\n      socket.on(\"connect\", () => {\n        socket.emit(\"board connect\", {\n          boardId: id,\n          socketId: socket.id,\n          userName,\n        });\n      });\n    }\n\n    window.addEventListener(\"beforeunload\", this.unloadHandler);\n\n    socket.emit(\"new board connection\", { boardId: id });\n\n    socket.on(\"fetch users\", (usersArray: string[]) => {\n      onlineUsers = usersArray;\n      this.setState(this.state);\n    });\n\n    socket.on(\n      \"user connect\",\n      (incomingUser: { userName: string; onlineUsers: string[] }) => {\n        onlineUsers = incomingUser.onlineUsers;\n        this.setState(this.state);\n        message.info(`User ${incomingUser.userName} is now seeing this board`);\n      },\n    );\n\n    socket.on(\n      \"user disconnect\",\n      (incomingUser: { userName: string; onlineUsers: string[] }) => {\n        onlineUsers = incomingUser.onlineUsers;\n        this.setState(this.state);\n        message.info(`User ${incomingUser.userName} has disconnected`);\n      },\n    );\n  }\n\n  showModal: () => void = () => {\n    this.setState({ modalVisible: true });\n  };\n\n  modalCancelHandler: () => void = () => {\n    this.setState({\n      modalVisible: false,\n    });\n  };\n\n  formRef!: FormRef;\n\n  loadableCanvas!: DrawingCanvas;\n\n  saveFormRef: (formRef: FormRef) => void = formRef => {\n    this.formRef = formRef;\n  };\n\n  componentWillUnmount(): void {\n    window.addEventListener(\"beforeunload\", this.unloadHandler);\n\n    this.props.socket.emit(\"board disconnect\", {\n      boardId: this.props.query.id,\n      userName: this.props.userName || \"\",\n    });\n\n    this.props.socket.close();\n  }\n\n  render() {\n    const id = this.props.query.id;\n\n    const listFooter = (\n      <Affix offsetBottom={10}>\n        <Button type=\"primary\" onClick={this.showModal} htmlType=\"button\">\n          Publish new post\n        </Button>\n      </Affix>\n    );\n\n    return (\n      <>\n        <Query query={SINGLE_BOARD_QUERY} variables={{ id }}>\n          {({ error, loading, data }) => {\n            if (error)\n              return (\n                <p>\n                  Error loading board with id: {id}. {error.toString()}\n                </p>\n              );\n            if (loading)\n              return <PacmanLoader loading={loading} color={\"black\"} />;\n\n            const posts: PostProps = data.board.posts;\n\n            return (\n              <>\n                <Head>\n                  <title>{data.board.name}</title>\n                </Head>\n\n                <List\n                  footer={listFooter}\n                  itemLayout=\"vertical\"\n                  size=\"large\"\n                  dataSource={posts}\n                  renderItem={(post: PostProps) => (\n                    <Post {...post} key={post.id} author={post.author} />\n                  )}\n                />\n\n                <p>\n                  Users seeing this board:{\" \"}\n                  {onlineUsers.map((user, idx) => {\n                    const separator =\n                      idx === onlineUsers.length - 1 ? \"\" : \", \";\n                    return (\n                      <React.Fragment key={user}>\n                        <Icon type=\"user\" /> {`${user}${separator}`}\n                      </React.Fragment>\n                    );\n                  })}\n                </p>\n              </>\n            );\n          }}\n        </Query>\n\n        <Mutation\n          mutation={CREATE_POST_MUTATION}\n          refetchQueries={[\n            {\n              query: SINGLE_BOARD_QUERY,\n              variables: { id, userName: this.props.userName },\n            },\n          ]}\n        >\n          {(createPost, { loading }) => (\n            <Modal\n              align={null}\n              title=\"Create new post\"\n              visible={this.state.modalVisible}\n              confirmLoading={loading}\n              destroyOnClose={true}\n              onCancel={this.modalCancelHandler}\n              onOk={e => {\n                e.preventDefault();\n                const form = this.formRef.props.form;\n                form.validateFields(async (err, values: PostFormFields) => {\n                  if (!err) {\n                    const image = this.loadableCanvas.getSaveData();\n                    await createPost({\n                      variables: {\n                        title: values.postTitle,\n                        content: values.postContent,\n                        boardId: id,\n                        image,\n                      },\n                    });\n                    this.setState({\n                      modalVisible: false,\n                    });\n                  }\n                });\n              }}\n            >\n              <fieldset disabled={loading} aria-busy={loading}>\n                <PostForm wrappedComponentRef={this.saveFormRef} />\n                <CanvasDraw\n                  ref={(canvasDraw: any) => (this.loadableCanvas = canvasDraw)}\n                  canvasWidth={472}\n                  canvasHeight={250}\n                  imgSrc=\"\"\n                  disabled={loading}\n                />\n              </fieldset>\n            </Modal>\n          )}\n        </Mutation>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return { onlineUsers: state.onlineUsers };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addOnlineUser: bindActionCreators(addOnlineUser, dispatch),\n  };\n};\n\nexport default connect()(Board);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA6BA;AACA;AACA;;;;;;;;;;;;;;;;;;AAOA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAFA;AAIA;AACA;AA4CA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAKA;AACA;AACA;AACA;;;;;;AA5DA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAGA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAEA;;;AAoBA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;;;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAMA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAMA;AACA;AAAA;AAAA;AAEA;AAEA;AAOA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AALA;AAaA;AAEA;AACA;AAAA;AACA;AAAA;AAGA;AAIA;AAIA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAFA;AAHA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAJA;AADA;AACA;AAJA;AAWA;AACA;AADA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAgBA;AA1BA;AA4BA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AALA;AA/BA;AA4CA;;;;;;AA3MA;;;;;;AACA;AAEA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AALA;AACA;AA8MA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}